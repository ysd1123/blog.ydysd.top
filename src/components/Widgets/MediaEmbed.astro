---
import 'lite-youtube-embed/src/lite-yt-embed.css'
---

<script>
async function setupYouTubeEmbeds() {
  const youtube = document.querySelectorAll('lite-youtube')
  if (youtube.length === 0) {
    return
  }

  try {
    // @ts-expect-error - No type definitions available for lite-youtube-embed
    await import('lite-youtube-embed')
  }
  catch (error) {
    console.error('Failed to load YouTube embed:', error)
  }
}

async function setupTwitterEmbeds() {
  const tweets = document.querySelectorAll('.twitter-tweet')
  if (tweets.length === 0) {
    return
  }

  tweets.forEach((tweet) => {
    tweet.setAttribute('data-theme', document.documentElement.classList.contains('dark') ? 'dark' : 'light')
  })

  const script = document.createElement('script')
  script.src = 'https://platform.twitter.com/widgets.js'
  script.async = true
  document.head.appendChild(script)
}

async function setupMermaidEmbeds() {
  const mermaids = document.querySelectorAll('pre.mermaid')
  if (mermaids.length === 0) {
    return
  }

  mermaids.forEach((element) => {
    const mermaid = element as HTMLElement
    if (!mermaid.dataset.mermaidCode) {
      mermaid.dataset.mermaidCode = mermaid.textContent?.trim() ?? ''
    }
  })

  try {
    const { default: mermaid } = await import('mermaid')
    mermaid.initialize({
      startOnLoad: false,
      theme: document.documentElement.classList.contains('dark') ? 'dark' : 'default',
    })
    mermaid.run()
  }
  catch (error) {
    console.error('Failed to load Mermaid:', error)
  }
}

async function setupMediaEmbeds() {
  await Promise.allSettled([
    setupYouTubeEmbeds(),
    setupTwitterEmbeds(),
    setupMermaidEmbeds(),
  ])
}

function updateMermaidTheme() {
  const mermaids = document.querySelectorAll('pre.mermaid[data-mermaid-code]')
  if (mermaids.length === 0) {
    return
  }

  const isDark = document.documentElement.classList.contains('dark')

  import('mermaid').then(({ default: mermaid }) => {
    mermaid.initialize({
      startOnLoad: false,
      theme: isDark ? 'dark' : 'default',
    })

    mermaids.forEach((element) => {
      const mermaid = element as HTMLElement
      mermaid.innerHTML = mermaid.dataset.mermaidCode ?? ''
      mermaid.removeAttribute('data-processed')
    })

    mermaid.run()
  }).catch((error) => {
    console.error('Failed to update Mermaid theme:', error)
  })
}

function handleGalleryWheel(e: WheelEvent) {
  const container = (e.target as Element)?.closest('.gallery-container') as HTMLElement
  if (!container) {
    return
  }

  const previousScrollLeft = container.scrollLeft
  container.scrollLeft += e.deltaY
  if (container.scrollLeft === previousScrollLeft) {
    return
  }

  e.preventDefault()
}

document.addEventListener('astro:page-load', setupMediaEmbeds)
document.addEventListener('theme-changed', updateMermaidTheme)
document.addEventListener('wheel', handleGalleryWheel, { passive: false })
setupMediaEmbeds()
</script>
